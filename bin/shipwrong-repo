#!/usr/bin/env perl
our $VERSION = '0.01';
$VERSION = eval $VERSION;

use strict;
use warnings;

use FindBin;
use File::Spec::Functions qw( updir catfile catdir );
use File::Copy;
use File::Copy::Recursive;
use File::Find;

use Pod::Usage;
use Getopt::Long;
use File::Temp;
use File::ShareDir;
use File::Basename;
use Path::Class;

use IPC::Cmd qw/ can_run run /;

use autodie qw( :all move copy );

{
    my $command = shift or pod2usage(1);
    no strict 'refs';
    pod2usage(1) unless $command =~ /^(create|update|version)$/;
    $command->();
    exit;
}

######################

sub create {
    my $opt_debianize = 0;
    GetOptions( 'debianize' => \$opt_debianize );

    my $new_package_name = shift @ARGV;
    $new_package_name or die "must provide a name for the new package\n";
    @ARGV and pod2usage(1);
    -e $new_package_name and die "$new_package_name already exists\n";


    # check that we have shipwright installed
    can_run('shipwright') or die "can't find shipwright executable in path, please install it\n";
    if( $opt_debianize ) {
        can_run('dh_make') or die "can't find dh_make executable in path, needed for --debianize\n";
    }

    my $tempdir = File::Temp->newdir;

    my $new_repos = $new_package_name;

    # use shipwright to make a new repos in the current dir
    print 'running shipwright ... ';
    system 'shipwright', 'create', -r => "fs:$new_repos";
    unlink catfile( $new_repos, '__default_builder_options' );

    if( $opt_debianize ) {
        my $deb_repos = "$new_repos-1.0";

        print "debianizing as $new_package_name-1.0\n";

        # Debianize it
        File::Copy::Recursive::dirmove( $new_repos, $deb_repos );
        system "cd $deb_repos && yes | dh_make --single --native --copyright artistic > /dev/null";

        #copy the debian skel into it
        File::Copy::Recursive::rcopy( _share_dir('debian'), $new_repos );

        # and rename the directory to a regular dir name
        File::Copy::Recursive::dirmove( $deb_repos, $new_repos );
    }

    { # copy the skel and confs on top of it
      File::Copy::Recursive::rcopy_glob( _share_dir('skel').'/*', $new_repos );
      local $File::Copy::Recursive::KeepMode = 0;
      File::Copy::Recursive::rcopy_glob( _share_dir('conf').'/*', $new_repos ) for qw( skel conf );
    }

    # set the permissions
    find( sub { my $f = $_; chmod ( -d $f ? 0755 : 0644 ), $f },
          $new_repos,
         );

    # fix up the conf
    my $conf_file = catfile( $new_repos,'shipwrong.conf' );
    my $conf_text = slurp( $conf_file );
    $conf_text =~ s/=packagename\n/=$new_package_name\n/g;
    open my $c, '>', $conf_file;
    print $c $conf_text;
}


sub update {
    my $target_dir = shift @ARGV;
    $target_dir or pod2usage(1);
    -d $target_dir or die "dir '$target_dir' does not exist\n";

    my $skel = _share_dir('skel');
    my $conf = _share_dir('conf');

    print "shipwrong updating $target_dir\n";

    # remove any legacy files
    my @legacy_files = (
        catfile($target_dir,'bin','shipwrong-update'),
       );
    for (@legacy_files) {
        chmod 0755, $_;
        unlink $_;
    }

    #local $File::Copy::Recursive::KeepMode = 0;
    # copy the skel on top of it
    File::Copy::Recursive::rcopy_glob( "$skel/*", $target_dir );
    File::Copy::Recursive::rcopy_glob( "$skel/bin/*", catdir($target_dir,'bin') );

    for ( glob "$conf/*" ) {
	my $bn = basename $_;
	next if -e catfile($target_dir,$bn);
        copy( $_, $target_dir );
        chmod 0664, catfile( $target_dir, $_ );
	print "WARNING: you should manually edit the contents of $target_dir/$bn\n";
    }
}

sub version {
    print "$FindBin::Script $VERSION\n";
}

######## HELPER SUBS ########

sub _share_dir {
    my $share = eval { File::ShareDir::dist_dir('Shipwrong') }
	|| catdir( $FindBin::RealBin, updir(), 'share' );
    my $d = catdir( $share, @_ );
    -d $d or die "can't find shared ".join('/',@_)." dir ";
    return $d;
}

sub slurp {
    local $/;
    open my $c, +shift;
    <$c>
}

__END__

=head1 NAME

shipwrong - simplified wrapper for creating Shipwright repositories

=head1 SYNOPSIS

  shipwrong-repo create [ --debianize ] <packagename>
  shipwrong-repo update <dirname>
  shipwrong-repo version

=head1 DESCRIPTION

=head2 create

Create a new Shipwright repository in the current directory with the
given name.  If --debianize is passed, add a debian/ directory and
Debian build system to it.

=head2 update

Update the Shipwrong files in the given repository directory.

=head2 version

Print version and exit

=head1 AUTHOR

Robert Buels, E<lt>rmb32@cornell.eduE<gt>

=head1 COPYRIGHT & LICENSE

Copyright 2010 Robert Buels

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
