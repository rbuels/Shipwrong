#!/usr/bin/env perl
use strict;
use warnings;

use Carp;
use FindBin;
use Getopt::Std;
use Pod::Usage;
use version;

use File::Spec::Functions;
use IPC::Cmd qw/ can_run run /;
use YAML qw/ LoadFile /;

# check for presence of required executables
for (qw(
         shipwright
       )) {
    can_run($_) or die "$_ executable not found in PATH, aborting.\n";
}

# check that we are in the root of the shipwright repos
   -d 'shipwright'
&& -d 'scripts'
&& -d 'sources'
    or die "must be run from root of shipwright repository\n";


my @module_blacklist = qw| XML::SAX::Exception |;
my %opt;
getopts('v',\%opt) or pod2usage(1);

my @dists = @ARGV;

my $sources  = LoadFile( catfile( 'shipwright', 'source.yml' ) )
    or die "could not load shipwright/source.yml!\n";
my $versions  = LoadFile( catfile( 'shipwright', 'version.yml' ) )
    or die "could not load shipwright/version.yml!\n";

my @dist_data = map {
    my $dist = $_;
    my $curr_source = $sources->{$dist}->{vendor}
        or die "$dist source not found\n";
    my $curr_version = $versions->{$dist}
        or die "$dist version not found\n";
    $curr_version = $curr_version->{vendor} || '';

    my ($updater_pkg) = grep $_->can_handle_source( $curr_source ), sw_update->plugins
        or die "no shipwrong-update plugin found to handle $dist, with source '$curr_source'";

    [ $dist, $curr_source, $curr_version, $updater_pkg ]
} @dists;

# update each dist
foreach (@dist_data) {
    my ( $dist, $curr_source, $curr_ver, $updater_pkg ) = @$_;


    unless( $updater_pkg->needs_update( $dist ) ) {
        print "skipping update of $dist, stored source is already at latest version.\n";
    } else {
        my @import_args = $updater_pkg->shipwright_import_args( $dist );

        print "updating $dist from ".join(' ',@import_args)."\n";

        system 'shipwright',
            ( 'import',
              #'--skip-installed',
              #'--overwrite',
              '-r'        => 'fs:.',
              '--name'    => $dist,
              ( $opt{v} ? '-l info' : () ),
              ( map { ('--skip', $_) } @module_blacklist ),
              @import_args,
             );
        $? and die "shipwright update failed, aborting\n";
        print "done updating $dist\n";
    }
}

exit;


############ SUBS ##############

sub read_sources {
    return YAML::LoadFile( catfile( 'shipwright', 'source.yml' ) )
        || die "could not load shipwright/source.yml!\n";
}

sub read_versions {
    return YAML::LoadFile( catfile( 'shipwright', 'version.yml' ) )
        || die "could not load shipwright/source.yml!\n";
}

sub write_sources {
    my ($sources) = @_;
    YAML::DumpFile( catfile('shipright','source.yml'), $sources );
}

# use Hash::Merge;
# sub add_to_sources {
#     write_sources( merge( read_sources(), @_ ));
# }


# updater base class
package sw_update;
use File::Spec::Functions;
use Module::Pluggable search_path => __PACKAGE__;
use YAML ();

sub version_number {
    my $class = shift;
    my $tag = shift;
    $tag =~ /(v?[\d\.]+)$/
        or return;
    return version->new($1);
}

sub sources {
    main::read_sources();
}
sub versions {
    main::read_versions();
}


# package for updating svn tagged releases
package sw_update::svn;
use base 'sw_update';

sub can_handle_source {
    shift;
    return shift =~ m!^svn:.*/(branches|tags|trunk)/!;
}

sub shipwright_import_args {
    my ($class, $dist) = @_;
    return $class->_find_latest_source( $class->sources->{$dist}{vendor} );
}

sub needs_update {
    my ($class, $dist ) = @_;

    my $source = $class->sources->{$dist}{vendor}
        or return 1;

    my ($latest_source) = $class->_find_latest_source( $dist );
    unless( $latest_source ) {
        warn "WARNING: no tagged versions found in version control for source '$source'!\n";
        return 1;
    }

    print( "svn: $dist currently ",
           $class->_tag_from_url($source),
           ", latest ",
           $class->_tag_from_url($latest_source),
           "\n",
          );
    return !( $source eq $latest_source );
}

#### helpers

sub _find_latest_source {

    my $class = shift;
    my $dist  = shift;

    my $source_url = $class->sources->{$dist}{vendor}
        or die "cannot find dist '$dist' in sources";

    my $tag_base = $class->_tag_base_url($source_url);

    # list release tags, sort them descending by release num
    my @release_versions =
        sort { $b->[1] cmp $a->[1] }
        map {
            my ($tag) = m!([^/]+)/?\s*$!; #< extract the release tag
            [$tag,$class->version_number( $tag )]
        } `svn ls $tag_base`;

    return unless @release_versions;

    return "svn:$tag_base/$release_versions[0][0]";
}
sub _tag_from_url {
    my ($class,$source_url) = @_;
    $source_url =~ m|[^/\s]+$|
        or die "invalid url '$source_url'";
    return $&;
}

sub _tag_base_url {
    my ($class,$source_url) = @_;
    my $tags_base = $source_url;
    $tags_base =~ s/^svn://;
    $tags_base =~ s!/(branches|tags|trunk)/?.*$!!
            or die "cannot figure out tags path for source $source_url\n";
    $tags_base .= '/tags';
    return $tags_base;
}


# package for updating a git repo
package sw_update::git;
use base 'sw_update';
use Carp qw/confess/;
use File::Spec;
use File::Temp ();
use YAML ();

sub can_handle_source {
    my ($class, $source) = @_;
    return $source =~ m|^git:|;
}

sub shipwright_import_args {
    my ($class,$dist) = @_;
    my $source = $class->sources->{$dist}{vendor};
    my $release_tag = $class->_find_latest_release( $source )
        or confess "no releases available for '$dist'";

    return ( '--version' => $release_tag, $source );
}

sub _find_latest_release {
    my ($class,$source) = @_;

    $source =~ s/^git:// or die "cannot handle source url '$source'";
    my ($latest_release) = $class->_sorted_releases($source)
        or return;

    return $latest_release;
}

sub _sorted_releases {
    my ($class,$remote) = @_;
    return
        map $_->[0],
        sort { $b->[1] cmp $a->[1] }
        map  { m|refs/tags/([\w\-]+-[\d\.]+)| ? [$1,$class->version_number($1)] : () }
        `git ls-remote $remote`;
}

sub needs_update {
    my ($class, $dist ) = @_;

    my $source = $class->sources->{$dist}{vendor};

    my ($latest_version) = $class->_find_latest_release( $source );
    my $current_version = $class->versions->{$dist}{vendor};

    unless( $latest_version ) {
        warn "WARNING: no tagged versions found in version control for source '$source', not updating.\n";
        return;
    }

    no warnings 'uninitialized';
    print "git: $dist currently '$current_version', latest '$latest_version'\n";
    return !( $current_version eq $latest_version );
}


__END__

=head1 NAME

shipwrong-update - for each given dist, find the latest tagged release
in version control and update the dist's source from it

=head1 SYNOPSIS

  shipwrong-update [options] dist-name dist-name ...

  Options:

    -v   be more verbose

=head1 AUTHOR

Robert Buels, E<lt>rmb32@cornell.eduE<gt>

=head1 COPYRIGHT & LICENSE

Copyright 2010 Robert Buels

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
